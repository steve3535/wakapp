#!/bin/bash

RED='\033[0;91m'
NC='\033[0m' # No Color
GREEN='\033[0;32m'
YELLOW='\033[0;93m'
B_WHITE='\033[0;37m'
TIRET=...................
WAKAUSR_HOME=/home/wakausr

>../logs/configure.log

#CHECK BASH
user_shell="$SHELL"
printf "\n"
printf "%-36s%s" " . Checking shell " "$TIRET "
if [ "$user_shell" != "/bin/bash" ];then
        printf "${RED}%s${NC}\n" "the setup script runs under /bin/bash"
        exit 1
else
        printf "${GREEN}%s${NC}\n" "OK"
fi

#CHECK RUNAS USER
user_id="$UID"
printf "%-36s%s" " . Checking user " "$TIRET "
if [ "$user_id" -ne 0 ];then
        printf "${RED}%s${NC}\n" "FAIL: the setup script has to be run as root"
        exit 1
else
        printf "${GREEN}%s${NC}\n" "OK"
fi

#CHECK INTERNET CONNECTIVITY

printf "%-36s%s" " . Checking Internet connectivity " "$TIRET "
nc -z redhat.com 443 &>../logs/configure.log
if [ "$?" -eq 0 ];then
        printf "${GREEN}%s${NC}\n" "OK"
else
        printf "${RED}%s${NC}" "FAIL: No Internet connection ... retrying ..."
        nc -z redhat.com 443 &>../logs/configure.log
        if [ "$?" -eq 0 ];then
            printf "${GREEN}%s${NC}\n" "OK"
        else 
            printf "${RED}%s${NC}" " ... "
            nc -z redhat.com 443 &>../logs/configure.log
            if [ "$?" -eq 0 ];then
                printf "${GREEN}%s${NC}\n" "OK"
            else
                printf "${RED}%s${NC}\n" "Fail"
                exit 1
            fi
        fi
fi

#CHECK SUBSCRIPTION STATUS

printf "%-36s%s" " . Checking Host Subscription " "$TIRET "
subscription-manager status &>../logs/configure.log
if [ "$?" -ne 0 ];then
        printf "${RED}%s${NC}\n" "FAIL: The host is not subscribed"
        exit 1
else
        printf "${GREEN}%s${NC}\n" "OK"
fi

printf "%-36s%s" " . Checking repositories " "$TIRET "
ok=1
for repo in rhel-7-server-beta-rpms rhel-7-server-extras-rpms rhel-7-server-optional-rpms rhel-7-server-optional-beta-rpms;do
 subscription-manager repos --list-enabled | grep "$repo" &>../logs/configure.log
 if [ "$?" -ne 0 ];then
  printf "${RED}%s${NC}\n" "REPO "$repo" is not enabled"
  ok=0
  exit 1
 fi
done

if [ "$ok" -eq 1 ];then
  printf "${GREEN}%s${NC}\n" "OK"
fi

#CHECK REQUIRED PACKAGES
missing_pkgs=
printf "%-36s%s" " . Checking required packages " "$TIRET "
for pkg in nc wget curl rsync gcc rpmbuild ansible python yumdownloader docker pip3;do
    "$pkg" --version &>../logs/configure.log
    if [ "$?" -ne 0 ];then
         missing_pkgs+="$pkg "
    fi
done

if [ -z "$missing_pkgs" ];then
        printf "${GREEN}%s${NC}\n" "OK"
else
        printf "${RED}%s${NC}\n" "FAIL: missing packages: $missing_pkgs"
        exit 1
fi

printf "\n${YELLOW}%-36s${NC}\n" " Recommendation: install the latest version of Ansible and the docker-plugin through PIP3"

#CREATE WAKA USER

printf "%-36s%s" " . Create wakapp admin user " "$TIRET "

ansible localhost -m user -a 'name=wakausr shell=/bin/bash generate_ssh_key=yes groups=dockerroot' &>../logs/configure.log
ansible localhost -m copy -a 'content="wakausr ALL=(ALL) NOPASSWD:ALL\n" dest=/etc/sudoers.d/wakausr' &>../logs/configure.log

#WAKAUSR EXTRA PERMISSIONS
setfacl -R -m u:wakausr:rwx /var/cache/yum
setfacl -R -m d:u:wakausr:rwx /var/cache/yum

printf "${GREEN}%s${NC}\n" "OK"

#WAKAPP SERVER HOSTNAME AND IP

read -p " . Server hostname [$(hostname)]: " wakapp_srv_hostname
if [ -z "$wakapp_srv_hostname" ];then
  wakapp_srv_hostname=$(hostname)
fi

wakapp_srv_ip=(`ip a | grep -w inet | grep global | awk '{ print $2 }' | cut -d"/" -f1`)  # the parenthesis are for an array of results in case there are several ip addresses

ip_menu() {
  for ((i=1; i<=${#wakapp_srv_ip[@]}; i++)); do
     echo "   $i) ${wakapp_srv_ip[i-1]}"
  done
  read -p "   Select an IP to configure:(1) " choice
  if [ -z "$choice" ]; then
     rhp_ip=${wakapp_srv_ip[0]}   # rhp == rhel proxy ip
  else
     for ((i=1,ok=0; i<=${#wakapp_srv_ip[@]}; i++)); do
       if [ "${choice}" == "$i" ]; then
         ok=1
       fi
     done
  if [ $ok -eq 0 ]; then
     echo -e "${RED}   Invalid entry: $choice ${NC}"
     ip_menu
  else
     rhp_ip=${wakapp_srv_ip[choice -1]}
     echo "   You've selected $rhp_ip"
  fi
  fi
  }

ip_menu
wakapp_srv_ip="$rhp_ip"

#printf "\n   Server hostname set to $wakapp_srv_hostname and IP address set to $rhp_ip\n"

read -p "   Setup will use the values $wakapp_srv_hostname and $wakapp_srv_ip. Continue: Y/N ?(Y) " resp
  case $resp in
    N|n) printf "  ${RED}%s${NC}\n" "Cancel by User"
         ;;
    Y|y) sed -i '/export WAKA/d' "$WAKAUSR_HOME"/.bash_profile #Cleanup the profile file
         sed -i '/export ANSIBLE/d' "$WAKAUSR_HOME"/.bash_profile
         touch "$WAKAUSR_HOME"/ansible.cfg
         [[ -d "/home/wakausr/inventory" ]] || mkdir "$WAKAUSR_HOME"/inventory
         echo -e "[defaults]\ninventory = $WAKAUSR_HOME/inventory\nhost_key_checking = false\ncommand_warnings = false\n" > "$WAKAUSR_HOME"/ansible.cfg
         printf "%-36s%s" " . Setting up system variables" "$TIRET"
         echo "export WAKA_SRVNAME=$wakapp_srv_hostname" >> "$WAKAUSR_HOME"/.bash_profile
         echo "export WAKA_SRVIP=$wakapp_srv_ip" >> "$WAKAUSR_HOME"/.bash_profile
         echo "export ANSIBLE_CONFIG=$WAKAUSR_HOME/ansible.cfg" >> "$WAKAUSR_HOME"/.bash_profile
         chown -R wakausr.wakausr "$WAKAUSR_HOME"/ansible.cfg "$WAKAUSR_HOME"/inventory
         printf "${GREEN}%s${NC}\n" " OK"
         ;;
    *)   if [ -z "$resp" ];then
          sed -i '/export WAKA/d' "$WAKAUSR_HOME"/.bash_profile # Cleanup the profile file
          sed -i '/export ANSIBLE/d' "$WAKAUSR_HOME"/.bash_profile # Cleanup the profile file
          touch "$WAKAUSR_HOME"/ansible.cfg
          [[ -d "/home/wakausr/inventory" ]] || mkdir "$WAKAUSR_HOME"/inventory
          echo -e "[defaults]\ninventory = "$WAKAUSR_HOME"/inventory\nhost_key_checking = false\ncommand_warnings = false\n" > "$WAKAUSR_HOME"/ansible.cfg
          printf "%-36s%s" " . Setting up system variables" "$TIRET"
          echo "export WAKA_SRVNAME=$wakapp_srv_hostname" >> "$WAKAUSR_HOME"/.bash_profile
          echo "export WAKA_SRVIP=$wakapp_srv_ip" >> "$WAKAUSR_HOME"/.bash_profile
          echo "export ANSIBLE_CONFIG="$WAKAUSR_HOME"/ansible.cfg" >> "$WAKAUSR_HOME"/.bash_profile
          chown -R wakausr.wakausr "$WAKAUSR_HOME"/ansible.cfg "$WAKAUSR_HOME"/inventory
          printf "${GREEN}%s${NC}\n" " OK"
         else
          printf "${RED}%s${NC}\n" " FAIL: Cancel by User"
         fi
         ;;
  esac

read -p " . Path to the base RHEL 6 iso: " base6
#MOUNT RHEL BASE ISOs
while [ ! -f "$base6" ];do
 printf "${RED} %s\n${NC}" "  Invalid Path"
 read -p " . Path to the base RHEL 6 iso: " base6
done

read -p " . Path to the base RHEL 7 iso: " base7
while [ ! -f "$base7" ];do
 printf "${RED} %s\n${NC}" "  Invalid Path"
 read -p " . Path to the base RHEL 7 iso: " base7
done

printf "%-36s%s" " . Mount RHEL Base OS isos " "$TIRET "
ansible-playbook -e iso_ver6="$base6" -e iso_ver7="$base7" --tags mountiso configure.yml &>../logs/configure.log
if [ "$?" -eq 0 ];then
  printf "${GREEN}%s${NC}\n" "OK"
else
  printf "${RED} %s\n${NC}" "  An error occured while mounting base OS isos"
  exit 1
fi


printf "%-36s%s" " . Build binaries " "$TIRET "

   #copy bash-completion script
   cp ../bin/waka-completion.bash /etc/bash_completion.d/  &>../logs/configure.log 

cp -r ../src/rpmbuild/ ~root/
if [ "$?" -ne 0 ];then
  printf "${RED} %s\n${NC}" "  An error occured while building the binaries"
  exit 1
fi

ansible-playbook --tags rebuildclient configure.yml &>>../logs/configure.log
if [ "$?" -ne 0 ];then
  printf "${RED} %s\n${NC}" "  An error occured while building the binaries"
  exit 1
fi

cd ~/rpmbuild/SOURCES && tar czf wakapp-client-1.0.tar.gz wakapp-client-1.0 &>>../../wakapp/logs/configure.log
if [ "$?" -ne 0 ];then
  printf "${RED} %s\n${NC}" "  An error occured while building the binaries"
  exit 1
fi

cd - &>/dev/null && rpmbuild -ba ~root/rpmbuild/SPECS/wakapp-client.spec &>>../logs/configure.log

if [ "$?" -eq 0 ];then
  printf "${GREEN}%s${NC}\n" "OK"
else
  printf "${RED} %s\n${NC}" "  An error occured while building the binaries"
  exit 1
fi

cp ~root/rpmbuild/RPMS/x86_64/wakapp-client-1.0-1.el7.x86_64.rpm ../install/
 
printf "%-36s%s" " . Setup app directories " "$TIRET "
ansible-playbook --tags createdir configure.yml &>../logs/configure.log
if [ "$?" -eq 0 ];then
  printf "${GREEN}%s${NC}\n" "OK"
else
  printf "${RED} %s\n${NC}" "  An error occured while creating directories"
  exit 1
fi

printf "%-36s%s" " . Loading Images " "$TIRET "
ansible-playbook configure.yml --tags containerimages &>>../logs/configure.log
if [ "$?" -eq 0 ];then
  printf "${GREEN}%s${NC}\n" "OK"
else
  printf "${RED} %s\n${NC}" "  An error occured while loading images"
  exit 1
fi

printf "%-36s%s" " . Create required containers " "$TIRET "
ansible-playbook configure.yml --tags startdocker &>>../logs/configure.log
ansible-playbook configure.yml --tags containers &>>../logs/configure.log
if [ "$?" -eq 0 ];then
  printf "${GREEN}%s${NC}\n" "OK"
else
  printf "${RED} %s\n${NC}" "  An error occured while creating containers"
  exit 1
fi

printf "%-36s%s" " . Setting up firewall rules " "$TIRET "
ansible-playbook -e "ansible_python_interpreter=/usr/bin/python2.7" configure.yml --tags parefeu &>>../logs/configure.log
if [ "$?" -eq 0 ];then
  printf "${GREEN}%s${NC}\n" "OK"
else
  printf "${RED} %s\n${NC}" "  An error occured while setting up fw rules"
  exit 1
fi

echo


